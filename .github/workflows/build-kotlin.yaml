name: build-kotlin

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      allow-github-actor-bots:
        description: 'Jobs are executed if the GitHub Actor contains `[bot]` (for examples: `dependabot[bot]` and `renovate[`bot`])'
        default: true
        required: false
        type: boolean
      restore-kotlin-native-cache:
        description: 'Restore Kotlin cache, `~/.konan` directory'
        default: true
        required: false
        type: boolean
      gradle-cache:
        description: 'Use Gradle cache'
        default: true
        required: false
        type: string
      gradle-cache-cleanup:
        description: 'Enable removing unnecessary Gradle home cache'
        default: true
        required: false
        type: string
      gradle-args:
        description: 'Gradle args for every steps'
        default: ''
        required: false
        type: string
      all-tests:
        description: 'Enable running all tests'
        default: true
        required: false
        type: boolean
      gradle-args-all-tests:
        description: 'Gradle args for `All tests` step'
        default: ''
        required: false
        type: string
      code-coverage-report:
        description: 'Enable code coverage report'
        default: true
        required: false
        type: boolean
      api-check:
        description: 'Enable checking API changes'
        default: true
        required: false
        type: boolean
      gradle-args-api-check:
        description: 'Gradle args for `Check API` step'
        default: ''
        required: false
        type: string
      assemble:
        description: 'Enable running assemble'
        default: true
        required: false
        type: boolean
      gradle-args-assemble:
        description: 'Gradle args for `Assemble` step'
        default: ''
        required: false
        type: string
      code-analysis-check:
        description: 'Enable code analysis'
        default: true
        required: false
        type: boolean
      gradle-args-code-analysis-check:
        description: 'Gradle args for `Code analysis` step'
        default: ''
        required: false
        type: string
      code-format-check:
        description: 'Enable checking code format'
        default: true
        required: false
        type: boolean
      gradle-args-code-format-check:
        description: 'Gradle args for `Code format` step'
        default: ''
        required: false
        type: string
      code-quality-check:
        description: 'Enable code quality'
        default: true
        required: false
        type: boolean
      gradle-args-build-docs:
        description: 'Gradle args for `Generate docs` step'
        default: ''
        required: false
        type: string
      gradle-args-publish-snapshot:
        description: 'Gradle args for `Publish snapshot` step'
        default: ''
        required: false
        type: string
      publish-snapshot:
        description: 'Publish artifacts to Sonatype snapshots repository'
        default: true
        required: false
        type: boolean
      deploy-reports:
        description: 'Deploy reports to GitHub Pages and SonarQube'
        default: true
        required: false
        type: boolean
      gradle-args-update-sonarqube:
        description: 'Gradle args for `Update SonarQube` step'
        default: ''
        required: false
        type: string
      deploy-docs:
        description: 'Deploy docs to GitHub pages'
        default: true
        required: false
        type: boolean
      publish-all-docs:
        description: 'Publish all docs to GitHub pages'
        default: false
        required: false
        type: string
    secrets:
      ANALYSIS_SONAR_LOGIN:
        required: false
      NEXUS_STAGING_PROFILE_ID:
        required: false
      NEXUS_TOKEN:
        required: false
      NEXUS_USER:
        required: false

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  all-tests:
    if: ((inputs.allow-github-actor-bots == true) || (!contains(github.actor, '[bot]'))) && (inputs.all-tests)

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ 'macos-latest', 'ubuntu-latest', 'windows-latest' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0

      - name: Restore Kotlin native cache
        if: ${{ inputs.restore-kotlin-native-cache == 'true' }}
        uses: actions/cache@v3.0.8
        with:
          path: ~/.konan
          key: ${{ runner.os }}-konan-${{ hashFiles('**/gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-konan-

      - name: Set up Java
        uses: actions/setup-java@v3.5.0
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.3.0
        with:
          cache-disabled: ${{ inputs.gradle-cache == 'false' }}
          gradle-home-cache-cleanup: ${{ inputs.gradle-cache-cleanup == 'true' }}

      - name: All tests
        run: ./gradlew allTests ${{ inputs.gradle-args-all-tests }} ${{ inputs.gradle-args }}

      - name: Upload all tests report
        if: always()
        uses: actions/upload-artifact@v3.1.0
        with:
          name: 'report-all-tests-${{ matrix.os }}'
          path: 'build/reports/allTests'

      - name: Upload code coverage report
        if: (inputs.code-coverage-report == true)
        uses: actions/upload-artifact@v3.1.0
        with:
          name: 'report-code-coverage-${{ matrix.os }}'
          path: 'build/reports/kover'

  api-check:
    if: ((inputs.allow-github-actor-bots == true) || (!contains(github.actor, '[bot]'))) && (inputs.api-check == true)

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0

      - name: Restore Kotlin native cache
        if: ${{ inputs.restore-kotlin-native-cache == 'true' }}
        uses: actions/cache@v3.0.8
        with:
          path: ~/.konan
          key: ${{ runner.os }}-konan-${{ hashFiles('**/gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-konan-

      - name: Set up Java
        uses: actions/setup-java@v3.5.0
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.3.0
        with:
          cache-disabled: ${{ inputs.gradle-cache == 'false' }}
          gradle-home-cache-cleanup: ${{ inputs.gradle-cache-cleanup == 'true' }}

      - name: Check API
        run: ./gradlew checkApi ${{ inputs.gradle-args-api-check }} ${{ inputs.gradle-args }}

  assemble:
    if: ((inputs.allow-github-actor-bots == true) || (!contains(github.actor, '[bot]'))) && (inputs.assemble == true)

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ 'macos-latest', 'ubuntu-latest', 'windows-latest' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0

      - name: Restore Kotlin native cache
        if: ${{ inputs.restore-kotlin-native-cache == 'true' }}
        uses: actions/cache@v3.0.8
        with:
          path: ~/.konan
          key: ${{ runner.os }}-konan-${{ hashFiles('**/gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-konan-

      - name: Set up Java
        uses: actions/setup-java@v3.5.0
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.3.0
        with:
          cache-disabled: ${{ inputs.gradle-cache == 'false' }}
          gradle-home-cache-cleanup: ${{ inputs.gradle-cache-cleanup == 'true' }}

      - name: Assemble
        run: ./gradlew assemble ${{ inputs.gradle-args-assemble }} ${{ inputs.gradle-args }}

  code-analysis-check:
    if: ((inputs.allow-github-actor-bots == true) || (!contains(github.actor, '[bot]'))) && (inputs.code-analysis-check == true)

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0

      - name: Restore Kotlin native cache
        if: ${{ inputs.restore-kotlin-native-cache == 'true' }}
        uses: actions/cache@v3.0.8
        with:
          path: ~/.konan
          key: ${{ runner.os }}-konan-${{ hashFiles('**/gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-konan-

      - name: Set up Java
        uses: actions/setup-java@v3.5.0
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.3.0
        with:
          cache-disabled: ${{ inputs.gradle-cache == 'false' }}
          gradle-home-cache-cleanup: ${{ inputs.gradle-cache-cleanup == 'true' }}

      - name: Code analysis
        run: ./gradlew checkAnalysis ${{ inputs.gradle-args-code-analysis-check }} ${{ inputs.gradle-args }}

      - name: Upload Code Scanning code analysis report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'build/reports/detekt/detekt.sarif'

      - name: Upload code analysis report
        uses: actions/upload-artifact@v3.1.0
        with:
          name: 'report-code-analysis'
          path: 'build/reports/detekt'

  code-format-check:
    if: ((inputs.allow-github-actor-bots == true) || (!contains(github.actor, '[bot]'))) && (inputs.code-format-check == true)

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0

      - name: Restore Kotlin native cache
        if: ${{ inputs.restore-kotlin-native-cache == 'true' }}
        uses: actions/cache@v3.0.8
        with:
          path: ~/.konan
          key: ${{ runner.os }}-konan-${{ hashFiles('**/gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-konan-

      - name: Set up Java
        uses: actions/setup-java@v3.5.0
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.3.0
        with:
          cache-disabled: ${{ inputs.gradle-cache == 'false' }}
          gradle-home-cache-cleanup: ${{ inputs.gradle-cache-cleanup == 'true' }}

      - name: Code format
        run: ./gradlew checkFormat ${{ inputs.gradle-args-code-format-check }} ${{ inputs.gradle-args }}

  code-quality-check:
    if: ((inputs.allow-github-actor-bots == true) || (!contains(github.actor, '[bot]'))) && (inputs.code-quality-check == true)

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0

      - name: Restore Kotlin native cache
        if: ${{ inputs.restore-kotlin-native-cache == 'true' }}
        uses: actions/cache@v3.0.8
        with:
          path: ~/.konan
          key: ${{ runner.os }}-konan-${{ hashFiles('**/gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-konan-

      - name: Set up Java
        uses: actions/setup-java@v3.5.0
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Code quality
        uses: JetBrains/qodana-action@v2022.2.1

      - name: Upload code quality report
        uses: actions/upload-artifact@v3.1.0
        with:
          name: 'report-code-quality'
          path: ${{ runner.temp }}/qodana/results/report

  deploy-reports:
    if: |
      (((inputs.allow-github-actor-bots == true) || (!contains(github.actor, '[bot]'))) && (inputs.deploy-reports == true))

    needs: [ all-tests, api-check, assemble, code-analysis-check, code-format-check, code-quality-check ]

    runs-on: 'ubuntu-latest'

    env:
      ANALYSIS_SONAR_LOGIN: '${{ secrets.ANALYSIS_SONAR_LOGIN }}'

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0

      - name: Restore Kotlin native cache
        if: ${{ inputs.restore-kotlin-native-cache == 'true' }}
        uses: actions/cache@v3.0.8
        with:
          path: ~/.konan
          key: ${{ runner.os }}-konan-${{ hashFiles('**/gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-konan-

      - name: Set up Java
        uses: actions/setup-java@v3.5.0
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.3.0
        with:
          cache-disabled: ${{ inputs.gradle-cache == 'false' }}
          gradle-home-cache-cleanup: ${{ inputs.gradle-cache-cleanup == 'true' }}

      - name: Download all tests reports
        uses: actions/download-artifact@v3
        with:
          name: 'report-all-tests-ubuntu-latest'
          path: 'build/reports-generated/all-tests'

      - name: Download code analysis reports
        uses: actions/download-artifact@v3
        with:
          name: 'report-code-analysis'
          path: 'build/reports-generated/code-analysis/'

      - name: Rename code analysis report
        run: |
          mkdir -p build/reports/detekt
          cp build/reports-generated/code-analysis/detekt.xml build/reports/detekt/detekt.xml
          mv build/reports-generated/code-analysis/detekt.html build/reports-generated/code-analysis/index.html

      - name: Download code coverage reports
        if: (inputs.code-coverage-report == true)
        uses: actions/download-artifact@v3
        with:
          name: 'report-code-coverage-ubuntu-latest'
          path: '${{ runner.temp }}/reports/code-coverage'

      - name: Rename code coverage report
        if: (inputs.code-coverage-report == true)
        run: |
          mv ${{ runner.temp }}/reports/code-coverage/merged/html build/reports-generated/code-coverage
          mkdir -p build/reports/kover
          mv ${{ runner.temp }}/reports/code-coverage/merged/xml/report.xml build/reports/kover/report.xml

      - name: Download code quality reports
        uses: actions/download-artifact@v3
        with:
          name: 'report-code-quality'
          path: 'build/reports-generated/code-quality'

      - name: Set semver as output
        id: semver
        if: (github.event_name == 'push') || (github.event_name == 'workflow_dispatch')
        run: ./gradlew printSemver --githubOnlyRoot --githubOutput

      - name: Update SonarQube
        run: ./gradlew sonarqube ${{ inputs.gradle-args-update-sonarqube }} ${{ inputs.gradle-args }}

      - name: Deploy reports to GitHub Pages
        if: (github.event_name == 'push') || (github.event_name == 'workflow_dispatch')
        uses: JamesIves/github-pages-deploy-action@v4.4.0
        with:
          branch: 'gh-pages'
          folder: 'build/reports-generated/'
          clean: true
          single-commit: false
          commit-message: 'Deploy ${{ steps.semver.outputs.semver }} reports'
          target-folder: 'reports-generated/'
          clean-exclude: |
            !reports-generated/**

  publish-snapshot:
    if: |
      !cancelled() && !failure() &&
      (((inputs.allow-github-actor-bots == true) || (!contains(github.actor, '[bot]'))) && ((github.event_name == 'push') || (github.event_name == 'workflow_dispatch')) && (inputs.publish-snapshot == true))

    needs: [ all-tests, api-check, assemble, code-analysis-check, code-format-check, code-quality-check ]

    runs-on: 'macos-latest'

    env:
      NEXUS_USER: '${{ secrets.NEXUS_USER }}'
      NEXUS_TOKEN: '${{ secrets.NEXUS_TOKEN }}'
      NEXUS_STAGING_PROFILE_ID: '${{ secrets.NEXUS_STAGING_PROFILE_ID }}'

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0

      - name: Restore Kotlin native cache
        if: ${{ inputs.restore-kotlin-native-cache == 'true' }}
        uses: actions/cache@v3.0.8
        with:
          path: ~/.konan
          key: ${{ runner.os }}-konan-${{ hashFiles('**/gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-konan-

      - name: Set up Java
        uses: actions/setup-java@v3.5.0
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.3.0
        with:
          cache-disabled: ${{ inputs.gradle-cache == 'false' }}
          gradle-home-cache-cleanup: ${{ inputs.gradle-cache-cleanup == 'true' }}

      - name: Publish snapshot
        run: ./gradlew publishToSonatype ${{ inputs.gradle-args-publish-snapshot }} ${{ inputs.gradle-args }} -Psemver.stage=snapshot

  deploy-docs:
    if: ((inputs.allow-github-actor-bots == true) || (!contains(github.actor, '[bot]'))) && ((github.event_name == 'push') || (github.event_name == 'workflow_dispatch')) && (inputs.deploy-docs == true)

    needs: publish-snapshot

    runs-on: 'ubuntu-latest'

    env:
      NEXUS_USER: '${{ secrets.NEXUS_USER }}'
      NEXUS_TOKEN: '${{ secrets.NEXUS_TOKEN }}'
      NEXUS_STAGING_PROFILE_ID: '${{ secrets.NEXUS_STAGING_PROFILE_ID }}'

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0

      - name: Restore Kotlin native cache
        if: ${{ inputs.restore-kotlin-native-cache == 'true' }}
        uses: actions/cache@v3.0.8
        with:
          path: ~/.konan
          key: ${{ runner.os }}-konan-${{ hashFiles('**/gradle/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-konan-

      - name: Set up Java
        uses: actions/setup-java@v3.5.0
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.3.0
        with:
          cache-disabled: ${{ inputs.gradle-cache == 'false' }}
          gradle-home-cache-cleanup: ${{ inputs.gradle-cache-cleanup == 'true' }}

      - name: Set semver as output
        id: semver
        run: ./gradlew printSemver --githubOnlyRoot --githubOutput -Psemver.stage=snapshot

      - name: Generate docs
        run: ./gradlew buildSite ${{ inputs.gradle-args-build-docs }} ${{ inputs.gradle-args }} -Psemver.stage=snapshot

      - name: Deploy all docs to GitHub Pages
        if: (inputs.publish-all-docs == 'true')
        uses: JamesIves/github-pages-deploy-action@v4.4.0
        with:
          branch: 'gh-pages'
          folder: 'build/docs/_site'
          single-commit: false
          commit-message: 'Deploy ${{ steps.semver.outputs.semver }} all docs'
          clean: true
          clean-exclude: |
            api/versions/**
            reports-generated/**

      - name: Deploy only API docs and reports to GitHub Pages
        if: (inputs.publish-all-docs == 'false')
        uses: JamesIves/github-pages-deploy-action@v4.4.0
        with:
          branch: 'gh-pages'
          folder: 'build/docs/_site/api/snapshot/'
          target-folder: 'api/snapshot/'
          single-commit: false
          commit-message: 'Deploy ${{ steps.semver.outputs.semver }} API docs and reports'
          clean: true
          clean-exclude: |
            !api/snapshot/**
