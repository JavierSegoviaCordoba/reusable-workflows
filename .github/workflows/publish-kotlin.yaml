name: publish-kotlin

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      code-coverage-report:
        description: 'Enable code coverage report'
        default: true
        required: false
        type: boolean
      code-quality-check:
        description: 'Enable code quality'
        default: true
        required: false
        type: boolean
      publish-maven-central:
        description: 'Publish artifacts to MavenCentral'
        default: true
        required: false
        type: boolean
      publish-gradle-plugin-portal:
        description: 'Publish Gradle plugins to Gradle Plugin Portal'
        default: false
        required: false
        type: boolean
      publish-jetbrains-marketplace:
        description: 'Publish IntelliJ IDEA plugins to JetBrains marketplace'
        default: false
        required: false
        type: boolean
      publish-docs:
        description: 'Publish docs to GitHub pages'
        default: true
        required: false
        type: boolean
      gradle-args:
        description: 'Gradle args for every steps'
        default: ''
        required: false
        type: string
      run_before_args:
        description: 'Gradle args for `Run before` step'
        default: ''
        required: false
        type: string
      gradle-args-build:
        description: 'Gradle args for `build` step'
        default: ''
        required: false
        type: string
      gradle-args-publish-maven-central:
        description: 'Gradle args for `Publish to MavenCentral` step'
        default: ''
        required: false
        type: string
      gradle-args-publish-gradle-plugin-portal:
        description: 'Gradle args for `Publish to Gradle Plugin Portal` step'
        default: ''
        required: false
        type: string
      gradle-args-publish-jetbrains-marketplace:
        description: 'Gradle args for `Publish to JetBrains marketplace` step'
        default: ''
        required: false
        type: string
      run-sonar-linux:
        description: 'Run Sonar task'
        default: true
        required: false
        type: boolean
      gradle-args-sonar:
        description: 'Gradle args for `Update Sonar` step'
        default: ''
        required: false
        type: string
      publish-github-release:
        description: 'Publish GitHub release'
        default: true
        required: false
        type: boolean
      restore-kotlin-native-cache:
        description: 'Restore Kotlin cache, `~/.konan` directory'
        default: true
        required: false
        type: boolean
      gradle-cache:
        description: 'Use Gradle cache'
        default: true
        required: false
        type: string
      gradle-cache-cleanup:
        description: 'Enable removing unnecessary Gradle home cache'
        default: 'on-success'
        required: false
        type: string
      changelog-file:
        description: 'Changelog file path for empty tag prefix'
        default: 'CHANGELOG.md'
        required: false
        type: string
    secrets:
      ANALYSIS_QODANA_TOKEN:
        required: false
      ANALYSIS_SONAR_TOKEN:
        required: false
      GRADLE_ENCRYPTION_KEY:
        required: false
      NEXUS_STAGING_PROFILE_ID:
        required: false
      NEXUS_TOKEN:
        required: false
      NEXUS_USER:
        required: false
      SIGNING_GNUPG_KEY:
        required: false
      SIGNING_GNUPG_PASSPHRASE:
        required: false
      GRADLE_PUBLISH_KEY:
        required: false
      GRADLE_PUBLISH_SECRET:
        required: false
      JETBRAINS_MARKETPLACE_CERTIFICATE_CHAIN:
        required: false
      JETBRAINS_MARKETPLACE_KEY:
        required: false
      JETBRAINS_MARKETPLACE_KEY_PASSPHRASE:
        required: false
      JETBRAINS_MARKETPLACE_TOKEN:
        required: false

env:
  ANALYSIS_SONAR_TOKEN: ${{ secrets.ANALYSIS_SONAR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GRADLE_ENCRYPTION_KEY: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
  QODANA_TOKEN: ${{ secrets.ANALYSIS_QODANA_TOKEN }}
  SIGNING_GNUPG_KEY: '${{ secrets.SIGNING_GNUPG_KEY }}'
  SIGNING_GNUPG_PASSPHRASE: '${{ secrets.SIGNING_GNUPG_PASSPHRASE }}'

jobs:
  tag-prefix:
    runs-on: 'ubuntu-latest'

    outputs:
      tag-prefix: ${{ steps.tag-prefix.outputs.tag-prefix }}

    steps:
      - name: Calculate tag prefix output
        id: tag-prefix
        run: |
          echo "github.ref_name: ${{ github.ref_name }}"
          version="${{ github.ref_name }}"
          if [[ $version =~ ^([a-zA-Z]*)[0-9]?.* ]]; then
            prefix="${BASH_REMATCH[1]}"
            echo "tag-prefix=$prefix" >> "$GITHUB_OUTPUT"
          else
            echo "Invalid version format"
            exit 1
          fi
          echo "Prefix: $prefix"

  build:
    if: ((inputs.allow-github-actor-bots == true) || (!contains(github.actor, '[bot]')))

    needs: tag-prefix

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ 'macos-latest', 'ubuntu-latest', 'windows-latest' ]

    steps:
      - name: Checkout
        uses: JavierSegoviaCordoba/reusable-workflows/actions/checkout@main

      # TODO: Workaround for https://github.com/gradle/gradle/issues/30213?notification_referrer_id=NT_kwDOAHHijLMxMTk5Mjg4Mjg3Nzo3NDYzNTY0#issuecomment-2302398137
      - name: Cache JGit
        id: cache-jgit
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4
        with:
          path: '~/.config/jgit/config'
          key: ${{ runner.os }}-jgit

      - name: Kotlin native cache
        if: inputs.restore-kotlin-native-cache == true
        uses: JavierSegoviaCordoba/reusable-workflows/actions/kotlin-native-cache@main

      - name: Set up Java
        uses: JavierSegoviaCordoba/reusable-workflows/actions/setup-java@main

      - name: Set up Gradle
        uses: JavierSegoviaCordoba/reusable-workflows/actions/setup-gradle@main
        with:
          cache-enabled: ${{ inputs.gradle-cache }}
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          cache-cleanup: ${{ inputs.gradle-cache-cleanup }}

      - name: Set up Xcode
        # TODO: Fix watchOS simulator. Disable if not necessary.
        # if: 'false'
        uses: JavierSegoviaCordoba/reusable-workflows/actions/setup-xcode@main

      - name: Set up Python
        if: startsWith(matrix.os, 'macos-latest')
        uses: JavierSegoviaCordoba/reusable-workflows/actions/setup-python@main

      - name: Run before
        run: ${{ inputs.run_before_args }}

      - name: Build
        run: ./gradlew build -P semver.tagPrefix=${{ needs.tag-prefix.outputs.tag-prefix }} ${{ inputs.gradle-args }}

      - name: Publish test reports
        uses: mikepenz/action-junit-report@992d97d6eb2e5f3de985fbf9df6a04386874114d # v5.1.0
        if: success() || failure()
        with:
          report_paths: '**/build/test-results/**/TEST-*.xml'

      - name: Upload reports
        if: ${{ failure() }}
        uses: JavierSegoviaCordoba/reusable-workflows/actions/upload-artifact@main
        with:
          name: 'reports-${{ matrix.os }}'
          path: 'build/reports'

      - name: Update Sonar
        if: (matrix.os == 'ubuntu-latest') && (inputs.run-sonar-linux == 'true' || inputs.run-sonar-linux == true)
        run: ./gradlew sonar -P semver.tagPrefix=${{ needs.tag-prefix.outputs.tag-prefix }} ${{ inputs.gradle-args-sonar }} ${{ inputs.gradle-args }}

  code-quality-check:
    if: ((inputs.allow-github-actor-bots == true) || (!contains(github.actor, '[bot]'))) && (inputs.code-quality-check == true)

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: JavierSegoviaCordoba/reusable-workflows/actions/checkout@main

      - name: Kotlin native cache
        if: inputs.restore-kotlin-native-cache == true
        uses: JavierSegoviaCordoba/reusable-workflows/actions/kotlin-native-cache@main

      - name: Update Qodana
        uses: JavierSegoviaCordoba/reusable-workflows/actions/qodana@main

  publish:
    if: ((inputs.allow-github-actor-bots == true) || (!contains(github.actor, '[bot]')))

    needs: [ tag-prefix, build ]

    runs-on: 'macos-latest'

    env:
      GRADLE_PUBLISH_KEY: '${{ secrets.GRADLE_PUBLISH_KEY }}'
      GRADLE_PUBLISH_SECRET: '${{ secrets.GRADLE_PUBLISH_SECRET }}'
      JETBRAINS_MARKETPLACE_CERTIFICATE_CHAIN: '${{ secrets.JETBRAINS_MARKETPLACE_CERTIFICATE_CHAIN }}'
      JETBRAINS_MARKETPLACE_KEY: '${{ secrets.JETBRAINS_MARKETPLACE_KEY }}'
      JETBRAINS_MARKETPLACE_KEY_PASSPHRASE: '${{ secrets.JETBRAINS_MARKETPLACE_KEY_PASSPHRASE }}'
      INTELLIJ_TOKEN: '${{ secrets.INTELLIJ_TOKEN }}'
      NEXUS_USER: '${{ secrets.NEXUS_USER }}'
      NEXUS_TOKEN: '${{ secrets.NEXUS_TOKEN }}'
      NEXUS_STAGING_PROFILE_ID: '${{ secrets.NEXUS_STAGING_PROFILE_ID }}'

    steps:
      - name: Checkout
        uses: JavierSegoviaCordoba/reusable-workflows/actions/checkout@main

      - name: Kotlin native cache
        if: inputs.restore-kotlin-native-cache == true
        uses: JavierSegoviaCordoba/reusable-workflows/actions/kotlin-native-cache@main

      - name: Set up Java
        uses: JavierSegoviaCordoba/reusable-workflows/actions/setup-java@main

      - name: Set up Gradle
        uses: JavierSegoviaCordoba/reusable-workflows/actions/setup-gradle@main
        with:
          cache-enabled: ${{ inputs.gradle-cache }}
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          cache-cleanup: ${{ inputs.gradle-cache-cleanup }}

      - name: Set up Xcode
        # TODO: Fix watchOS simulator. Disable if not necessary.
        # if: 'false'
        uses: JavierSegoviaCordoba/reusable-workflows/actions/setup-xcode@main

      - name: Set up Python
        if: startsWith(matrix.os, 'macos-latest')
        uses: JavierSegoviaCordoba/reusable-workflows/actions/setup-python@main

      - name: Publish to MavenCentral
        if: (inputs.publish-maven-central == true)
        run: ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository -P semver.tagPrefix=${{ needs.tag-prefix.outputs.tag-prefix }} ${{ inputs.gradle-args-publish-maven-central }} ${{ inputs.gradle-args }} --no-configuration-cache

      - name: Publish to Gradle Plugin Portal
        if: (inputs.publish-gradle-plugin-portal == true)
        run: ./gradlew publishPlugins --no-parallel --no-configuration-cache -P semver.tagPrefix=${{ needs.tag-prefix.outputs.tag-prefix }} ${{ inputs.gradle-args-publish-gradle-plugin-portal }} -Pgradle.publish.key=${{ secrets.GRADLE_PUBLISH_KEY }} -Pgradle.publish.secret=${{ secrets.GRADLE_PUBLISH_SECRET }} ${{ inputs.gradle-args }}

      - name: Publish to JetBrains marketplace
        if: (inputs.publish-jetbrains-marketplace == true)
        run: ./gradlew publishPlugin -P semver.tagPrefix=${{ needs.tag-prefix.outputs.tag-prefix }} ${{ inputs.gradle-args-publish-jetbrains-marketplace }} ${{ inputs.gradle-args }}

  deploy-docs:
    if: ((inputs.allow-github-actor-bots == true) || (!contains(github.actor, '[bot]'))) && (inputs.publish-docs == true) && !contains(github.ref, 'dev') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc') && (needs.tag-prefix.outputs.tag-prefix == '')

    needs: [ code-quality-check, tag-prefix, publish ]

    runs-on: 'ubuntu-latest'

    steps:
      - name: Checkout
        uses: JavierSegoviaCordoba/reusable-workflows/actions/checkout@main

      - name: Kotlin native cache
        if: inputs.restore-kotlin-native-cache == true
        uses: JavierSegoviaCordoba/reusable-workflows/actions/kotlin-native-cache@main

      - name: Set up Java
        uses: JavierSegoviaCordoba/reusable-workflows/actions/setup-java@main

      - name: Set up Gradle
        uses: JavierSegoviaCordoba/reusable-workflows/actions/setup-gradle@main
        with:
          cache-enabled: ${{ inputs.gradle-cache }}
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          cache-cleanup: ${{ inputs.gradle-cache-cleanup }}

      - name: Generate Site docs
        run: ./gradlew buildSite -P semver.tagPrefix=${{ needs.tag-prefix.outputs.tag-prefix }} ${{ inputs.gradle-args }} --no-scan --no-configuration-cache

      - name: Deploy docs to GitHub Pages
        uses: JavierSegoviaCordoba/reusable-workflows/actions/github-pages-deploy@main
        with:
          folder: 'build/docs/_site'
          single-commit: true
          clean-exclude: |
            api/snapshot/**
            api/versions/**
            reports-generated/**

  github-release:
    if: ((inputs.allow-github-actor-bots == true) || (!contains(github.actor, '[bot]'))) && (inputs.publish-github-release == true)

    needs: [ tag-prefix, publish ]

    runs-on: 'ubuntu-latest'

    steps:
      - name: Checkout
        uses: JavierSegoviaCordoba/reusable-workflows/actions/checkout@main

      - name: Publish GitHub Release
        uses: JavierSegoviaCordoba/reusable-workflows/actions/github-release@main
        with:
          changelog-file: '${{ inputs.changelog-file }}'
          github-token: '${{ secrets.GITHUB_TOKEN }}'
          pre-release: ${{ contains(github.ref, 'dev') || contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          tag-prefix-regex: '[a-z]?'
