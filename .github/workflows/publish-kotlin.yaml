name: publish-kotlin

on:
  workflow_call:
    inputs:
      machines:
        description: 'Virtual environments. Set all machines separated by comma, for example: `ubuntu-latest, windows-latest`. The first one will be used for one global time steps.'
        default: 'ubuntu-latest'
        required: true
        type: string
      gradle-plugin-portal:
        description: 'If this is enabled, Gradle plugins are published to Gradle Plugin Portal and MavenCentral, if disabled, they are only published to MavenCentral'
        default: false
        required: false
        type: boolean
    secrets:
      GITHUB_TOKEN:
        required: true
      OSS_USER:
        required: true
      OSS_TOKEN:
        required: true
      OSS_STAGING_PROFILE_ID:
        required: true
      SIGNING_KEY_NAME:
        required: true
      SIGNING_KEY_ID:
        required: true
      SIGNING_KEY_PASSPHRASE:
        required: true
      SIGNING_KEY:
        required: true
      GRADLE_PUBLISH_KEY:
        required: true
      GRADLE_PUBLISH_SECRET:
        required: true

jobs:
  setup-matrix:
    if: github.actor != 'renovate[bot]'
    runs-on: 'ubuntu-latest'

    outputs:
      matrix: ${{ steps.setup-matrix.outputs.matrix }}

    steps:
      - name: Setup matrix
        id: setup-matrix
        run: |
          MACHINES=$(echo "\"${{ inputs.machines }}\"" | tr -d '[:space:]' | sed 's/,/", "/g')
          echo $MACHINES
          echo "::set-output name=matrix::{\"os\": [$MACHINES]}"

  publish:
    needs: setup-matrix

    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setup-matrix.outputs.matrix)}}

    runs-on: '${{ matrix.os }}'

    env:
      OSS_USER: '${{ secrets.OSS_USER }}'
      OSS_TOKEN: '${{ secrets.OSS_TOKEN }}'
      OSS_STAGING_PROFILE_ID: '${{ secrets.OSS_STAGING_PROFILE_ID }}'
      SIGNING_KEY_NAME: '${{ secrets.SIGNING_KEY_NAME }}'
      SIGNING_KEY_ID: '${{ secrets.SIGNING_KEY_ID }}'
      SIGNING_KEY_PASSPHRASE: '${{ secrets.SIGNING_KEY_PASSPHRASE }}'
      SIGNING_KEY: '${{ secrets.SIGNING_KEY }}'
      GRADLE_PUBLISH_KEY: '${{ secrets.GRADLE_PUBLISH_KEY }}'
      GRADLE_PUBLISH_SECRET: '${{ secrets.GRADLE_PUBLISH_SECRET }}'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v2.3.1
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.konan
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle.properties', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Gradle build
        run: ./gradlew build

      - name: Generate Site docs
        if: ${{ (matrix.os == fromJson(needs.setup-matrix.outputs.matrix).os[0]) && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc') }}
        run: ./gradlew buildDocs

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.SIGNING_KEY }}
          passphrase: ${{ secrets.SIGNING_KEY_PASSPHRASE }}

      - name: Publish to MavenCentral
        run: ./gradlew publishToSonatype closeSonatypeStagingRepository

      - name: Publish to Gradle Plugin Portal
        if: ${{ inputs.gradle-plugin-portal == true }}
        run: ./gradlew publishPlugins -P"gradle.publish.key"="${{ secrets.GRADLE_PUBLISH_KEY }}" -P"gradle.publish.secret"="${{ secrets.GRADLE_PUBLISH_SECRET }}"

      - name: Deploy release docs to Github Pages
        if: ${{ (matrix.os == fromJson(needs.setup-matrix.outputs.matrix).os[0]) && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc') }}
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          branch: 'gh-pages'
          folder: 'build/docs/_site'
          clean: false
          single-commit: true

      - name: Stop Gradle daemons
        run: ./gradlew --stop

  github-release:
    runs-on: ubuntu-latest

    needs:
      - publish

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set pre-release
        shell: bash
        id: pre_release
        run: |
          if [[ ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }} ]]
          then
            echo ::set-output name=is_pre_release::true
          else
            echo ::set-output name=is_pre_release::false
          fi

      - name: Release
        uses: docker://antonyurchenko/git-release:latest
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          DRAFT_RELEASE: true
          PRE_RELEASE: '${{ steps.pre_release.outputs.is_pre_release }}'
          CHANGELOG_FILE: 'CHANGELOG.md'
          ALLOW_EMPTY_CHANGELOG: false
