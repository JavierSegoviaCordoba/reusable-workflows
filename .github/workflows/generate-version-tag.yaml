name: generate-version-tag

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      gradle-args:
        description: 'Gradle args for every steps'
        default: ''
        required: false
        type: string
      stage:
        description: 'Stage [dev, alpha, beta, rc, final, auto]'
        default: 'auto'
        required: true
        type: string
      scope:
        description: 'Scope [patch, minor, major, auto]'
        default: 'auto'
        required: true
        type: string
      restore-kotlin-native-cache:
        description: 'Restore Kotlin cache, `~/.konan` directory'
        default: true
        required: false
        type: boolean
      project-path:
        description: 'Project path to set the version GitHub output'
        default: ''
        required: false
        type: string
      semver-output-field:
        description: 'Semver output for root or nested modules'
        default: 'SEMVER'
        required: false
        type: string
      tag-prefix:
        description: 'Tag prefix to be published'
        default: ''
        required: false
        type: string
      gradle-cache:
        description: 'Use Gradle cache'
        default: true
        required: false
        type: string
      gradle-cache-cleanup:
        description: 'Enable removing unnecessary Gradle home cache'
        default: 'on-success'
        required: false
        type: string
    secrets:
      GRADLE_ENCRYPTION_KEY:
        required: false
      SIGNING_GNUPG_KEY:
        required: false
      SIGNING_GNUPG_PASSPHRASE:
        required: false
      TOKEN_GITHUB_ACTION:
        required: true

env:
  GRADLE_ENCRYPTION_KEY: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
  SIGNING_GNUPG_KEY: '${{ secrets.SIGNING_GNUPG_KEY }}'
  SIGNING_GNUPG_PASSPHRASE: '${{ secrets.SIGNING_GNUPG_PASSPHRASE }}'

jobs:
  generate-version-tag:
    if: ((inputs.allow-github-actor-bots == true) || (!contains(github.actor, '[bot]')))

    runs-on: 'macos-latest'

    steps:
      - name: Checkout
        uses: JavierSegoviaCordoba/reusable-workflows/actions/checkout@main
        with:
          token: '${{ secrets.TOKEN_GITHUB_ACTION }}'

      # TODO: Workaround for https://github.com/gradle/gradle/issues/30213?notification_referrer_id=NT_kwDOAHHijLMxMTk5Mjg4Mjg3Nzo3NDYzNTY0#issuecomment-2302398137
      - name: Cache JGit
        id: cache-jgit
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4
        with:
          path: '~/.config/jgit/config'
          key: ${{ runner.os }}-jgit

      - name: Kotlin native cache
        if: inputs.restore-kotlin-native-cache == true
        uses: JavierSegoviaCordoba/reusable-workflows/actions/kotlin-native-cache@main

      - name: Set up Java
        uses: JavierSegoviaCordoba/reusable-workflows/actions/setup-java@main

      - name: Set up Gradle
        uses: JavierSegoviaCordoba/reusable-workflows/actions/setup-gradle@main
        with:
          cache-enabled: ${{ inputs.gradle-cache }}
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          cache-cleanup: ${{ inputs.gradle-cache-cleanup }}

      - name: Set up Xcode
        # TODO: Fix watchOS simulator. Disable if not necessary.
        # if: 'false'
        uses: JavierSegoviaCordoba/reusable-workflows/actions/setup-xcode@main

      - name: Set up Python
        if: startsWith(matrix.os, 'macos-latest')
        uses: JavierSegoviaCordoba/reusable-workflows/actions/setup-python@main

      - name: Set project versions as outputs
        id: semver-outputs
        run: ./gradlew ${{ inputs.project-path }}printSemver --githubOutput ${{ inputs.gradle-args }} -P semver.tagPrefix=${{ inputs.tag-prefix }} -Psemver.stage=${{ inputs.stage }} -Psemver.scope=${{ inputs.scope }} -Psemver.checkClean=false --no-scan

      - name: Set PUBLISH_VERSION output
        shell: kotlin -howtorun .main.kts {0}
        id: semver
        run: |
          val outputs: String = """${{ toJSON(steps.semver-outputs.outputs) }}"""
          val version: String =
              outputs
                  .lines()
                  .first { it.contains("SEMVER") }
                  .substringAfterLast(':')
                  .filterNot(Char::isWhitespace)
                  .substringBeforeLast('"')
                  .substringAfter('"')
          println(version)
          val githubOutputFile = java.io.File(System.getenv("GITHUB_OUTPUT"))
          githubOutputFile.appendText("\nPUBLISH_VERSION=$version")

      # - name: Build
      #   run: ./gradlew build ${{ inputs.gradle-args }} -P semver.tagPrefix=${{ inputs.tag-prefix }} -P semver.stage=${{ inputs.stage }} -P semver.scope=${{ inputs.scope }}

      - name: Upload reports
        if: ${{ failure() }}
        uses: JavierSegoviaCordoba/reusable-workflows/actions/upload-artifact@main
        with:
          name: 'reports-${{ matrix.os }}'
          path: '**/build/reports/**'

      - name: Patch Changelog and regenerate README badges
        run: ./gradlew patchChangelog mergeChangelog writeReadmeBadges ${{ inputs.gradle-args }} -P semver.tagPrefix=${{ inputs.tag-prefix }} -P semver.stage=${{ inputs.stage }} -P semver.scope=${{ inputs.scope }} -P semver.checkClean=false

      - name: Commit
        uses: JavierSegoviaCordoba/reusable-workflows/actions/commit@main
        with:
          commit-message: 'Publish ${{ steps.semver.outputs.PUBLISH_VERSION }}'

      - name: Generate Tag
        run: ./gradlew createSemverTag ${{ inputs.gradle-args }} -P semver.tagPrefix=${{ inputs.tag-prefix }} -P semver.stage=${{ inputs.stage }} -P semver.scope=${{ inputs.scope }}

      - name: Push
        run: git push --follow-tags
